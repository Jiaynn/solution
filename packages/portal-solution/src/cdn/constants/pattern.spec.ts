import { ip, segment } from './pattern'

// ip 相关测试用例来自 https://github.com/sindresorhus/ip-regex
const v4 = [
  '0.0.0.0',
  '8.8.8.8',
  '127.0.0.1',
  '100.100.100.100',
  '192.168.0.1',
  '18.101.25.153',
  '123.23.34.2',
  '172.26.168.134',
  '212.58.241.131',
  '128.0.0.0',
  '23.71.254.72',
  '223.255.255.255',
  '192.0.2.235',
  '99.198.122.146',
  '46.51.197.88',
  '173.194.34.134'
]

const v4not = [
  '.100.100.100.100',
  '100..100.100.100.',
  '100.100.100.100.',
  '123.123.123',
  'http://123.123.123'
]

const v6 = [
  '::',
  '1::',
  '::1',
  '1::8',
  '1::7:8',
  '1:2:3:4:5:6:7:8',
  '1:2:3:4:5:6::8',
  '1:2:3:4:5:6:7::',
  '1:2:3:4:5::7:8',
  '1:2:3:4:5::8',
  '1:2:3::8',
  '1::4:5:6:7:8',
  '1::6:7:8',
  '1::3:4:5:6:7:8',
  '1:2:3:4::6:7:8',
  '1:2::4:5:6:7:8',
  '::2:3:4:5:6:7:8',
  '1:2::8',
  '2001:0000:1234:0000:0000:C1C0:ABCD:0876',
  '3ffe:0b00:0000:0000:0001:0000:0000:000a',
  'FF02:0000:0000:0000:0000:0000:0000:0001',
  '0000:0000:0000:0000:0000:0000:0000:0001',
  '0000:0000:0000:0000:0000:0000:0000:0000',
  '::ffff:192.168.1.26',
  '2::10',
  'ff02::1',
  'fe80::',
  '2002::',
  '2001:db8::',
  '2001:0db8:1234::',
  '::ffff:0:0',
  '::ffff:192.168.1.1',
  '1:2:3:4::8',
  '1::2:3:4:5:6:7',
  '1::2:3:4:5:6',
  '1::2:3:4:5',
  '1::2:3:4',
  '1::2:3',
  '::2:3:4:5:6:7',
  '::2:3:4:5:6',
  '::2:3:4:5',
  '::2:3:4',
  '::2:3',
  '::8',
  '1:2:3:4:5:6::',
  '1:2:3:4:5::',
  '1:2:3:4::',
  '1:2:3::',
  '1:2::',
  '1:2:3:4::7:8',
  '1:2:3::7:8',
  '1:2::7:8',
  '1:2:3:4:5:6:1.2.3.4',
  '1:2:3:4:5::1.2.3.4',
  '1:2:3:4::1.2.3.4',
  '1:2:3::1.2.3.4',
  '1:2::1.2.3.4',
  '1::1.2.3.4',
  '1:2:3:4::5:1.2.3.4',
  '1:2:3::5:1.2.3.4',
  '1:2::5:1.2.3.4',
  '1::5:1.2.3.4',
  '1::5:11.22.33.44',
  'fe80::217:f2ff:254.7.237.98',
  'fe80::217:f2ff:fe07:ed62',
  '2001:DB8:0:0:8:800:200C:417A',
  'FF01:0:0:0:0:0:0:101',
  '0:0:0:0:0:0:0:1',
  '0:0:0:0:0:0:0:0',
  '2001:DB8::8:800:200C:417A',
  'FF01::101',
  '0:0:0:0:0:0:13.1.68.3',
  '0:0:0:0:0:FFFF:129.144.52.38',
  '::13.1.68.3',
  '::FFFF:129.144.52.38',
  'fe80:0000:0000:0000:0204:61ff:fe9d:f156',
  'fe80:0:0:0:204:61ff:fe9d:f156',
  'fe80::204:61ff:fe9d:f156',
  'fe80:0:0:0:204:61ff:254.157.241.86',
  'fe80::204:61ff:254.157.241.86',
  'fe80::1',
  '2001:0db8:85a3:0000:0000:8a2e:0370:7334',
  '2001:db8:85a3:0:0:8a2e:370:7334',
  '2001:db8:85a3::8a2e:370:7334',
  '2001:0db8:0000:0000:0000:0000:1428:57ab',
  '2001:0db8:0000:0000:0000::1428:57ab',
  '2001:0db8:0:0:0:0:1428:57ab',
  '2001:0db8:0:0::1428:57ab',
  '2001:0db8::1428:57ab',
  '2001:db8::1428:57ab',
  '::ffff:12.34.56.78',
  '::ffff:0c22:384e',
  '2001:0db8:1234:0000:0000:0000:0000:0000',
  '2001:0db8:1234:ffff:ffff:ffff:ffff:ffff',
  '2001:db8:a::123',
  '::ffff:192.0.2.128',
  '::ffff:c000:280',
  'a:b:c:d:e:f:f1:f2',
  'a:b:c::d:e:f:f1',
  'a:b:c::d:e:f',
  'a:b:c::d:e',
  'a:b:c::d',
  '::a',
  '::a:b:c',
  '::a:b:c:d:e:f:f1',
  'a::',
  'a:b:c::',
  'a:b:c:d:e:f:f1::',
  'a:bb:ccc:dddd:000e:00f:0f::',
  '0:a:0:a:0:0:0:a',
  '0:a:0:0:a:0:0:a',
  '2001:db8:1:1:1:1:0:0',
  '2001:db8:1:1:1:0:0:0',
  '2001:db8:1:1:0:0:0:0',
  '2001:db8:1:0:0:0:0:0',
  '2001:db8:0:0:0:0:0:0',
  '2001:0:0:0:0:0:0:0',
  'A:BB:CCC:DDDD:000E:00F:0F::',
  '0:0:0:0:0:0:0:a',
  '0:0:0:0:a:0:0:0',
  '0:0:0:a:0:0:0:0',
  'a:0:0:a:0:0:a:a',
  'a:0:0:a:0:0:0:a',
  'a:0:0:0:a:0:0:a',
  'a:0:0:0:a:0:0:0',
  'a:0:0:0:0:0:0:0',
  'fe80::7:8%eth0',
  'fe80::7:8%1'
]

const v6not = [
  '',
  ' ',
  '1:',
  ':1',
  '2001:0000:1234: 0000:0000:C1C0:ABCD:0876',
  '2001:1:1:1:1:1:255Z255X255Y255',
  ':',
  '1.2.3.4:1111:2222:3333:4444::5555',
  '1.2.3.4:1111:2222:3333::5555',
  '1.2.3.4:1111:2222::5555',
  '1.2.3.4:1111::5555',
  '1.2.3.4::5555',
  '1.2.3.4::',
  '123',
  'ldkfj',
  '2001:db8:85a3::8a2e:370k:7334',
  '1:2:3::4:5:6:7:8:9',
  '2001:0000:1234:0000:0000:C1C0:ABCD:0876 0'
]

function expectMatchResult(text: string, expectedResult: boolean) {
  // 这里用了 forEach 去遍历 case，fail 的时候结果里会反映不出具体哪个 case 挂了
  // 因此这里通过 withText 把 case 信息带在结果里：
  // Expected value to be (using Object.is):
  //   "999.999.999.999 false"
  const withText = (val: boolean) => text + ' ' + val
  const result = ip.test(text)
  return expect(withText(result)).toBe(withText(expectedResult))
}

describe('ip', () => {
  it('should match ipv4 address', () => {
    v4.forEach(
      item => expectMatchResult(item, true)
    )
    v4not.forEach(
      item => expectMatchResult(item, false)
    )
  })

  it('should match ipv6 address', () => {
    v6.forEach(
      item => expectMatchResult(item, true)
    )
    v6not.forEach(
      item => expectMatchResult(item, false)
    )
  })
})

describe('segment', () => {
  it('should match net segment for ipv4', () => {
    expect(segment.test('192.168.0.1/24')).toBeTruthy()
    expect(segment.test('198.51.100.0/24')).toBeTruthy()

    expect(segment.test('198.168.0.1')).toBeFalsy()
    expect(segment.test('')).toBeFalsy()
  })

  it('should match net segment for ipv6', () => {
    expect(segment.test('2001:db8::/32')).toBeTruthy()
    expect(segment.test('2001:db8::2:0/112')).toBeTruthy()

    expect(segment.test('::')).toBeFalsy()
    expect(segment.test('2001:db8::')).toBeFalsy()
  })
})
